import { type ToastOptions } from 'vue3-toastify';
interface FlashMessage {
    message: string;
    type: 'success' | 'error' | 'info' | 'warning';
    options?: ToastOptions;
}
export declare const useFlashStore: import("pinia").StoreDefinition<"flash", import("pinia")._UnwrapAll<Pick<{
    messages: import("vue").Ref<{
        message: string;
        type: "success" | "error" | "info" | "warning";
        options?: {
            toastId?: import("vue3-toastify").Id | undefined;
            updateId?: import("vue3-toastify").Id | undefined;
            content?: import("vue3-toastify").Content | undefined;
            data?: {} | undefined;
            type?: import("vue3-toastify").ToastType | undefined;
            delay?: number | undefined;
            onOpen?: (<T = {}>(props: T) => void) | undefined;
            onClose?: (<T = {}>(props: T) => void) | undefined;
            onClick?: ((event: MouseEvent) => void) | undefined;
            toastStyle?: Record<string, any> | undefined;
            progress?: number | undefined;
            isLoading?: boolean | undefined;
            dangerouslyHTMLString?: boolean | undefined;
            rtl?: boolean | undefined;
            containerId?: import("vue3-toastify").Id | undefined;
            position?: import("vue3-toastify").ToastPosition | undefined;
            autoClose?: (number | boolean) | undefined;
            closeButton?: import("vue3-toastify").CloseBtnType | undefined;
            transition?: import("vue3-toastify").ToastTransition | {
                enter: string;
                exit: string;
                appendPosition?: boolean | undefined;
                collapse?: boolean | undefined;
                collapseDuration?: number | undefined;
            } | undefined;
            disabledEnterTransition?: boolean | undefined;
            hideProgressBar?: boolean | undefined;
            pauseOnHover?: boolean | undefined;
            pauseOnFocusLoss?: boolean | undefined;
            closeOnClick?: boolean | undefined;
            toastClassName?: string | undefined;
            bodyClassName?: string | undefined;
            style?: Record<string, any> | undefined;
            progressClassName?: string | undefined;
            progressStyle?: Record<string, any> | undefined;
            role?: string | undefined;
            theme?: import("vue3-toastify").ToastTheme | undefined;
            icon?: import("vue3-toastify").IconType | undefined;
        } | undefined;
    }[], FlashMessage[] | {
        message: string;
        type: "success" | "error" | "info" | "warning";
        options?: {
            toastId?: import("vue3-toastify").Id | undefined;
            updateId?: import("vue3-toastify").Id | undefined;
            content?: import("vue3-toastify").Content | undefined;
            data?: {} | undefined;
            type?: import("vue3-toastify").ToastType | undefined;
            delay?: number | undefined;
            onOpen?: (<T = {}>(props: T) => void) | undefined;
            onClose?: (<T = {}>(props: T) => void) | undefined;
            onClick?: ((event: MouseEvent) => void) | undefined;
            toastStyle?: Record<string, any> | undefined;
            progress?: number | undefined;
            isLoading?: boolean | undefined;
            dangerouslyHTMLString?: boolean | undefined;
            rtl?: boolean | undefined;
            containerId?: import("vue3-toastify").Id | undefined;
            position?: import("vue3-toastify").ToastPosition | undefined;
            autoClose?: (number | boolean) | undefined;
            closeButton?: import("vue3-toastify").CloseBtnType | undefined;
            transition?: import("vue3-toastify").ToastTransition | {
                enter: string;
                exit: string;
                appendPosition?: boolean | undefined;
                collapse?: boolean | undefined;
                collapseDuration?: number | undefined;
            } | undefined;
            disabledEnterTransition?: boolean | undefined;
            hideProgressBar?: boolean | undefined;
            pauseOnHover?: boolean | undefined;
            pauseOnFocusLoss?: boolean | undefined;
            closeOnClick?: boolean | undefined;
            toastClassName?: string | undefined;
            bodyClassName?: string | undefined;
            style?: Record<string, any> | undefined;
            progressClassName?: string | undefined;
            progressStyle?: Record<string, any> | undefined;
            role?: string | undefined;
            theme?: import("vue3-toastify").ToastTheme | undefined;
            icon?: import("vue3-toastify").IconType | undefined;
        } | undefined;
    }[]>;
    addMessage: (message: FlashMessage) => void;
    displayMessage: ({ message, type, options }: FlashMessage) => void;
    clearMessages: () => void;
}, "messages">>, Pick<{
    messages: import("vue").Ref<{
        message: string;
        type: "success" | "error" | "info" | "warning";
        options?: {
            toastId?: import("vue3-toastify").Id | undefined;
            updateId?: import("vue3-toastify").Id | undefined;
            content?: import("vue3-toastify").Content | undefined;
            data?: {} | undefined;
            type?: import("vue3-toastify").ToastType | undefined;
            delay?: number | undefined;
            onOpen?: (<T = {}>(props: T) => void) | undefined;
            onClose?: (<T = {}>(props: T) => void) | undefined;
            onClick?: ((event: MouseEvent) => void) | undefined;
            toastStyle?: Record<string, any> | undefined;
            progress?: number | undefined;
            isLoading?: boolean | undefined;
            dangerouslyHTMLString?: boolean | undefined;
            rtl?: boolean | undefined;
            containerId?: import("vue3-toastify").Id | undefined;
            position?: import("vue3-toastify").ToastPosition | undefined;
            autoClose?: (number | boolean) | undefined;
            closeButton?: import("vue3-toastify").CloseBtnType | undefined;
            transition?: import("vue3-toastify").ToastTransition | {
                enter: string;
                exit: string;
                appendPosition?: boolean | undefined;
                collapse?: boolean | undefined;
                collapseDuration?: number | undefined;
            } | undefined;
            disabledEnterTransition?: boolean | undefined;
            hideProgressBar?: boolean | undefined;
            pauseOnHover?: boolean | undefined;
            pauseOnFocusLoss?: boolean | undefined;
            closeOnClick?: boolean | undefined;
            toastClassName?: string | undefined;
            bodyClassName?: string | undefined;
            style?: Record<string, any> | undefined;
            progressClassName?: string | undefined;
            progressStyle?: Record<string, any> | undefined;
            role?: string | undefined;
            theme?: import("vue3-toastify").ToastTheme | undefined;
            icon?: import("vue3-toastify").IconType | undefined;
        } | undefined;
    }[], FlashMessage[] | {
        message: string;
        type: "success" | "error" | "info" | "warning";
        options?: {
            toastId?: import("vue3-toastify").Id | undefined;
            updateId?: import("vue3-toastify").Id | undefined;
            content?: import("vue3-toastify").Content | undefined;
            data?: {} | undefined;
            type?: import("vue3-toastify").ToastType | undefined;
            delay?: number | undefined;
            onOpen?: (<T = {}>(props: T) => void) | undefined;
            onClose?: (<T = {}>(props: T) => void) | undefined;
            onClick?: ((event: MouseEvent) => void) | undefined;
            toastStyle?: Record<string, any> | undefined;
            progress?: number | undefined;
            isLoading?: boolean | undefined;
            dangerouslyHTMLString?: boolean | undefined;
            rtl?: boolean | undefined;
            containerId?: import("vue3-toastify").Id | undefined;
            position?: import("vue3-toastify").ToastPosition | undefined;
            autoClose?: (number | boolean) | undefined;
            closeButton?: import("vue3-toastify").CloseBtnType | undefined;
            transition?: import("vue3-toastify").ToastTransition | {
                enter: string;
                exit: string;
                appendPosition?: boolean | undefined;
                collapse?: boolean | undefined;
                collapseDuration?: number | undefined;
            } | undefined;
            disabledEnterTransition?: boolean | undefined;
            hideProgressBar?: boolean | undefined;
            pauseOnHover?: boolean | undefined;
            pauseOnFocusLoss?: boolean | undefined;
            closeOnClick?: boolean | undefined;
            toastClassName?: string | undefined;
            bodyClassName?: string | undefined;
            style?: Record<string, any> | undefined;
            progressClassName?: string | undefined;
            progressStyle?: Record<string, any> | undefined;
            role?: string | undefined;
            theme?: import("vue3-toastify").ToastTheme | undefined;
            icon?: import("vue3-toastify").IconType | undefined;
        } | undefined;
    }[]>;
    addMessage: (message: FlashMessage) => void;
    displayMessage: ({ message, type, options }: FlashMessage) => void;
    clearMessages: () => void;
}, never>, Pick<{
    messages: import("vue").Ref<{
        message: string;
        type: "success" | "error" | "info" | "warning";
        options?: {
            toastId?: import("vue3-toastify").Id | undefined;
            updateId?: import("vue3-toastify").Id | undefined;
            content?: import("vue3-toastify").Content | undefined;
            data?: {} | undefined;
            type?: import("vue3-toastify").ToastType | undefined;
            delay?: number | undefined;
            onOpen?: (<T = {}>(props: T) => void) | undefined;
            onClose?: (<T = {}>(props: T) => void) | undefined;
            onClick?: ((event: MouseEvent) => void) | undefined;
            toastStyle?: Record<string, any> | undefined;
            progress?: number | undefined;
            isLoading?: boolean | undefined;
            dangerouslyHTMLString?: boolean | undefined;
            rtl?: boolean | undefined;
            containerId?: import("vue3-toastify").Id | undefined;
            position?: import("vue3-toastify").ToastPosition | undefined;
            autoClose?: (number | boolean) | undefined;
            closeButton?: import("vue3-toastify").CloseBtnType | undefined;
            transition?: import("vue3-toastify").ToastTransition | {
                enter: string;
                exit: string;
                appendPosition?: boolean | undefined;
                collapse?: boolean | undefined;
                collapseDuration?: number | undefined;
            } | undefined;
            disabledEnterTransition?: boolean | undefined;
            hideProgressBar?: boolean | undefined;
            pauseOnHover?: boolean | undefined;
            pauseOnFocusLoss?: boolean | undefined;
            closeOnClick?: boolean | undefined;
            toastClassName?: string | undefined;
            bodyClassName?: string | undefined;
            style?: Record<string, any> | undefined;
            progressClassName?: string | undefined;
            progressStyle?: Record<string, any> | undefined;
            role?: string | undefined;
            theme?: import("vue3-toastify").ToastTheme | undefined;
            icon?: import("vue3-toastify").IconType | undefined;
        } | undefined;
    }[], FlashMessage[] | {
        message: string;
        type: "success" | "error" | "info" | "warning";
        options?: {
            toastId?: import("vue3-toastify").Id | undefined;
            updateId?: import("vue3-toastify").Id | undefined;
            content?: import("vue3-toastify").Content | undefined;
            data?: {} | undefined;
            type?: import("vue3-toastify").ToastType | undefined;
            delay?: number | undefined;
            onOpen?: (<T = {}>(props: T) => void) | undefined;
            onClose?: (<T = {}>(props: T) => void) | undefined;
            onClick?: ((event: MouseEvent) => void) | undefined;
            toastStyle?: Record<string, any> | undefined;
            progress?: number | undefined;
            isLoading?: boolean | undefined;
            dangerouslyHTMLString?: boolean | undefined;
            rtl?: boolean | undefined;
            containerId?: import("vue3-toastify").Id | undefined;
            position?: import("vue3-toastify").ToastPosition | undefined;
            autoClose?: (number | boolean) | undefined;
            closeButton?: import("vue3-toastify").CloseBtnType | undefined;
            transition?: import("vue3-toastify").ToastTransition | {
                enter: string;
                exit: string;
                appendPosition?: boolean | undefined;
                collapse?: boolean | undefined;
                collapseDuration?: number | undefined;
            } | undefined;
            disabledEnterTransition?: boolean | undefined;
            hideProgressBar?: boolean | undefined;
            pauseOnHover?: boolean | undefined;
            pauseOnFocusLoss?: boolean | undefined;
            closeOnClick?: boolean | undefined;
            toastClassName?: string | undefined;
            bodyClassName?: string | undefined;
            style?: Record<string, any> | undefined;
            progressClassName?: string | undefined;
            progressStyle?: Record<string, any> | undefined;
            role?: string | undefined;
            theme?: import("vue3-toastify").ToastTheme | undefined;
            icon?: import("vue3-toastify").IconType | undefined;
        } | undefined;
    }[]>;
    addMessage: (message: FlashMessage) => void;
    displayMessage: ({ message, type, options }: FlashMessage) => void;
    clearMessages: () => void;
}, "addMessage" | "displayMessage" | "clearMessages">>;
export {};
